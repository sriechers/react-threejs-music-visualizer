{"version":3,"sources":["shaders/glowingNoiseShaderMaterial.js","contexts/AudioContext.jsx","components/FiberCanvas.jsx","components/Player.jsx","App.js","index.js"],"names":["GlowingNoiseShaderMaterial","shaderMaterial","u_time","u_mouse","THREE","u_resolution","u_freq","extend","audioContext","React","createContext","tracklist","tracklistData","currentTrack","playing","setPlaying","setCurrentTrack","useAudio","url","fftSize","smoothingTimeConstant","loop","volume","useContext","useState","songUrl","audioUrl","setUrl","audio","setAudio","audioCtx","setAudioCtx","data","setData","$analyser","setAnalyser","initAudioCtx","useCallback","audioFile","Audio","process","AudioContext","source","createMediaElementSource","_analyser","createAnalyser","connect","destination","useEffect","close","toggle","play","analyser","bufferLength","frequencyBinCount","amplitudeArray","Uint8Array","getByteFrequencyData","getFrequencyData","pause","addEventListener","removeEventListener","AudioContextProvider","children","setState","state","value","useMemo","Provider","AudioSphere","audioData","ref","useRef","size","useThree","frequencyBandArray","Array","keys","useFrame","delta","time","clock","elapsedTime","current","material","uniforms","mouse","x","y","width","height","rotation","z","i","length","num","freq","attach","args","color","Postprocessing","bloomOptions","grainOptions","composer","scene","gl","camera","setSize","render","attachArray","FXAAShader","UnrealBloomPass","FilmPass","RenderPass","ShaderPass","FiberCanvas","className","dpr","window","devicePixelRatio","colorManagement","position","onCreated","setClearColor","intensity","OrbitControls","enableZoom","enablePan","Player","console","log","src","img","alt","title","artist","onClick","currId","indexOf","newTrackId","prevSong","nextSong","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.365b9967.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { extend } from \"@react-three/fiber\"\nimport { shaderMaterial } from \"@react-three/drei\"\n\nexport const GlowingNoiseShaderMaterial = shaderMaterial(\n  {  \n    u_time: 0,\n    u_mouse: new THREE.Vector2(0,0),\n    u_resolution: new THREE.Vector2(0,0),\n    u_freq: 0\n    // u_audioDataArray: new THREE.Vector()\n  },\n  `\n  varying vec2 vUv;\n  varying float vMousePos;\n  varying float vDistort;\n  uniform float u_time;\n  uniform vec2 u_mouse;\n  uniform float u_freq;\n  float PI = 3.14159265359;\n\n  // uniform vec2 u_hover; \n\n  // GLSL textureless classic 3D noise \"cnoise\",\n  // with an RSL-style periodic variant \"pnoise\".\n  // Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n  // Version: 2011-10-11\n  //\n  // Many thanks to Ian McEwan of Ashima Arts for the\n  // ideas for permutation and gradient selection.\n  //\n  // Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n  // Distributed under the MIT license. See LICENSE file.\n  // https://github.com/ashima/webgl-noise\n  //\n\n  vec3 mod289(vec3 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 mod289(vec4 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 permute(vec4 x)\n  {\n    return mod289(((x*34.0)+1.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  // Classic Perlin noise, periodic variant\n  float pnoise(vec3 P, vec3 rep)\n  {\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n  }\n\n  mat3 rotation3dY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat3(\n      c, 0.0, -s,\n      0.0, 1.0, 0.0,\n      s, 0.0, c\n    );\n  }\n\n  vec3 rotateY(vec3 v, float angle) {\n    return rotation3dY(angle) * v;\n  }  \n\n  void main() {\n    vUv = uv;\n\n    float mousePos = 1.0 - ( 2.0 * max(abs(u_mouse.x), abs(u_mouse.y)) );\n    vMousePos = mousePos;\n\n    float scale = clamp(1.0 - abs(abs(u_mouse.x) + abs(u_mouse.y)), 1.0, 1.05);\n\n    float audioFreq = u_freq;\n    float speed = 0.02;\n    float t = u_time * speed + clamp(audioFreq / 100., 0.0, 0.2);\n    float frequency = 2.9;\n    float amplitude = 2.;\n    float noiseScale = 1.0;\n    float noiseDensity = 7.2 - sin(2.0*PI*(audioFreq / 15. / u_time) * 0.01);\n    float noiseStrength = 8. * mix(1.0, 2.0, u_freq / 100.);\n\n    vec3 repetitions = vec3(2.0);\n\n    // if playing\n    if(audioFreq > 0.0){\n      speed += 0.2;\n      noiseScale -= 0.1;\n      amplitude += 1.0;\n      frequency += 0.3;\n    }\n\n  \n    float distortion = pnoise((normal * noiseScale + t) * noiseDensity, repetitions) * noiseStrength;\n    vDistort = distortion;\n\n    vec3 pos = position + (normal * distortion);\n    float angle = sin(uv.y * frequency + t) * amplitude;\n    pos = rotateY(pos, angle);    \n\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos * ((clamp(scale * mix(1.0, 1.13, u_freq / 100.), 1.0, 1.8)) + mousePos * 0.02), 1.);\n  }\n  `,\n\n  `\n  varying float vDistort;\n  varying vec2 vUv;\n  varying float vMousePos;\n  uniform float u_time;\n  uniform vec2 u_resolution;\n  uniform vec2 u_mouse;\n  uniform float u_freq;\n  // uniform vec2 u_hover; \n  float PI = 3.14159265359;\n\n  vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n      return a + b * cos(6.28318 * (c * t + d));\n  } \n    \n  float quarticInOut(float t) {\n    return t < 0.5\n      ? +8.0 * pow(t, 4.0)\n      : -8.0 * pow(t - 1.0, 4.0) + 1.0;\n  }\n\n  float map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n  }\n\n  void main()\t{\n    float intensity = 6.0;\n    float distort = vDistort * intensity + mix(0.0, 0.13, u_freq / 100.);\n\n    vec2 position = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 brightness = vec3(0.7, 0.7, 0.7);\n    vec3 contrast = vec3(0.5);\n    vec3 oscilation = vec3(0.008);\n    vec3 phase = vec3(0.2);\n    float mouse = map(vMousePos * 5.0, -3.0, 1.0, 0.0, 1.0 );\n\n    float randGlow = (sin(2. * PI + u_time / 1.8) + 10.0) * 0.02;\n\n    float glow = quarticInOut(clamp(mouse, 0.1, 0.2) + randGlow) + mix(0.0, 0.13, u_freq / 100.);\n\n    vec3 color = cosPalette(distort, brightness, contrast, oscilation, phase) * glow;\n\n    gl_FragColor = vec4(color, 1.0);\n  }\n  `\n)\n\nextend({ GlowingNoiseShaderMaterial })","import React, { useState, useEffect, useCallback, useContext  } from 'react'\nimport tracklistData from '../tracklistData.json'\n\nexport const audioContext = React.createContext({\n  tracklist: tracklistData,\n  currentTrack: tracklistData[0],\n  playing: false,\n  setPlaying: () => {},\n  setCurrentTrack: () => {}\n})\n\nexport const useAudio = ({\n  url = false,\n  fftSize = 2048,\n  smoothingTimeConstant = 0.75,\n  loop = false,\n  volume = 1,\n}) => {\n  const { playing, setPlaying, currentTrack } = useContext(audioContext)\n  const [ audioUrl, setUrl ] = useState(url || currentTrack.songUrl)\n  const [ audio, setAudio ] = useState();\n  const [ audioCtx, setAudioCtx ] = useState(null);\n  const [ data, setData ] = useState(null);\n  const [ $analyser, setAnalyser ] = useState(null);\n\n  const initAudioCtx = useCallback(() => {\n    const audioFile = new Audio(process.env.PUBLIC_URL+audioUrl);\n    const audioContext = new AudioContext();\n    const source = audioContext.createMediaElementSource(audioFile);\n    const _analyser = audioContext.createAnalyser();\n    _analyser.fftSize = fftSize;\n    _analyser.smoothingTimeConstant = smoothingTimeConstant;\n    // _analyser.minDecibels = minDecibel;\n    // _analyser.maxDecibels = maxDecibel;\n    // audioFile.src = url;\n    audioFile.loop = loop;\n    audioFile.volume = volume;\n    source.connect(audioContext.destination);\n    source.connect(_analyser);\n\n    setAudio(audioFile);\n    setAudioCtx(audioContext);\n    setAnalyser(_analyser);\n\n    return { audioFile, _analyser };\n  }, [audioUrl]);\n\n  useEffect(() => {\n    setPlaying(false)\n    setUrl(() => currentTrack.songUrl)\n  }, [currentTrack])\n\n  const getFrequencyData = (analyser) => {\n    const bufferLength = analyser.frequencyBinCount;\n    const amplitudeArray = new Uint8Array(bufferLength);\n    analyser.getByteFrequencyData(amplitudeArray);\n    return amplitudeArray;\n  };\n\n  useEffect(() => {\n    return () => audioCtx?.close();\n  }, []);\n\n  const toggle = () => {\n    setPlaying(!playing);\n  };\n\n  useEffect(() => {\n    if (playing) {\n      const { audioFile, _analyser } = initAudioCtx()\n      audioFile.play();\n      setData(getFrequencyData(_analyser));\n    } else {\n      audio?.pause();\n    }\n  }, [playing])\n\n  useEffect(() => {\n    if (!audio) return;\n    audio.addEventListener(\"ended\", toggle);\n    return () => {\n      audioCtx?.close()\n      audio.removeEventListener(\"ended\", toggle);\n    };\n  }, [audio]);\n\n  return { playing, setUrl, data, analyser: $analyser, toggle };\n};\n\n\n\nfunction AudioContextProvider({children}) {\n  const { setUrl } = useAudio({ url: tracklistData[0].songUrl })\n  const setPlaying = (playing) => setState({...state, playing: playing})\n  const setCurrentTrack = (currentTrack) => {\n    setState({...state, currentTrack: currentTrack})\n    setUrl(currentTrack.songUrl)\n  }\n  \n  const [ state, setState ] = useState({\n    tracklist: tracklistData,\n    currentTrack: tracklistData[0],\n    playing: false\n  });\n  \n  // memorize State to avoid useless rerendering of child components\n  const value = React.useMemo(\n    () => ({\n      ...state,\n      setPlaying,\n      setCurrentTrack\n    }),\n    [state]\n  );\n\n  return (\n    <audioContext.Provider value={value}>\n      {children}\n    </audioContext.Provider>\n  )\n}\n\nexport default AudioContextProvider\n\n","import { useRef, useState, useEffect } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame, extend, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport glowingNoiseShaderMaterial from '../shaders/glowingNoiseShaderMaterial'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass.js';\n// import { useAudioPlayer } from \"react-use-audio-player\"\nimport { useAudio } from '../contexts/AudioContext'\n\nextend({ UnrealBloomPass, FilmPass, FXAAShader, RenderPass, ShaderPass })\n\nfunction AudioSphere({ audioData, analyser, playing }) {\n  const ref = useRef()\n  const { size } = useThree()\n  const frequencyBandArray = [...Array(100).keys()]\n\n  useFrame((state, delta) => {\n    let time = state.clock.elapsedTime;\n    ref.current.material.uniforms.u_time.value = time;\n    ref.current.material.uniforms.u_mouse.value = new THREE.Vector2(state.mouse.x + delta, state.mouse.y + delta);\n    ref.current.material.uniforms.u_resolution.value = new THREE.Vector2(size.width, size.height);\n    ref.current.rotation.y = time / 20;\n    ref.current.rotation.z = time / 45;\n\n    if(playing && audioData) {\n      analyser.getByteFrequencyData(audioData)\n      ref.current.rotation.x = time / 10;\n      ref.current.rotation.y = time / 5;\n      ref.current.rotation.z = time / 15;\n      for(let i = 0; i < frequencyBandArray.length; i++){\n        let num = frequencyBandArray[i]\n        let freq = audioData[num];\n        ref.current.material.uniforms.u_freq.value = freq;\n      }\n    }\n\n  })\n\n  return (\n    <>\n      <mesh \n      ref={ref} \n      >\n        <sphereBufferGeometry attach=\"geometry\" args={[100, 200, 200]}/>\n        <glowingNoiseShaderMaterial attach=\"material\" color=\"#203050\"/>\n        {/* <meshStandardMaterial attach=\"material\" color={'#00ff00'} /> */}\n      </mesh>\n    </>\n  )\n}\n\nfunction Postprocessing({ bloomOptions = [2, 1.0, 1.5, 0], grainOptions = [1, 0, 0, 0]}){\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  useEffect(() => {\n    composer.current.setSize(size.width, size.height)\n  }, [size])\n\n  useFrame(() => composer.current.render(), 1)\n\n  return (\n    <effectComposer ref={composer} args={[gl]}> \n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <shaderPass attachArray=\"passes\" args={[FXAAShader]} material-uniforms-resolution-value={[1 / size.width, 1 / size.height]} />\n      <filmPass attachArray=\"passes\" args={grainOptions}/>\n      <unrealBloomPass attachArray=\"passes\" args={bloomOptions}/>\n    </effectComposer> \n  )\n}\n\nfunction FiberCanvas() {\n    const { playing, analyser, data } = useAudio({url: false})\n    return ( \n      <>\n      <div className=\"webgl-canvas\">\n        <Canvas\n        dpr={window.devicePixelRatio}\n        colorManagement\n        // args={[null, null, 1000]}\n        camera={{ position: [0, 230, 0] }}\n        onCreated={({gl})=> {\n          gl.setClearColor('#000000')\n        }}\n        >\n          <ambientLight intensity={1} />\n          {/* <pointLight color=\"white\" intensity={1000} position={[window.innerWidth / 2, window.innerHeight / 2, 230]} /> */}\n          <AudioSphere audioData={data} playing={playing} analyser={analyser}/>\n          <OrbitControls enableZoom={false} enablePan={false}/>\n          <Postprocessing bloomOptions={[2, 1.0, 1.5, 0]}/>\n        </Canvas>\n      </div>\n      </>\n    )\n}\n\nexport default FiberCanvas\n","import { useContext, useEffect } from 'react'\nimport { PlayIcon, PauseIcon, FastForwardIcon } from '@heroicons/react/solid'\nimport { audioContext } from '../contexts/AudioContext'\n\nfunction Player() {\n  const { currentTrack, tracklist, setCurrentTrack, playing, setPlaying } = useContext(audioContext)\n  console.log(currentTrack)\n  const playSong = () => {\n    setPlaying(!playing)\n    // typeof onPlay === 'function' && onPlay();\n  }\n\n  const prevSong = () => {\n    setPlaying(false)\n    const currId = tracklist.indexOf(currentTrack);\n    // loop around if first track\n    const newTrackId = currId - 1 >= 0 ? currId - 1 : tracklist.length - 1\n    setCurrentTrack(tracklist[newTrackId])\n  }\n\n  const nextSong = () => {\n    setPlaying(false)\n    const currId = tracklist.indexOf(currentTrack);\n    // loop around if last track\n    const newTrackId = currId + 1 <= tracklist.length - 1 ? currId + 1 : 0\n    setCurrentTrack(tracklist[newTrackId])\n  }\n\n  return (\n    <div className=\"fixed bottom-0 left-0 w-full py-6 px-8 z-50 bg-black text-gray-100 border-t-2 border-dark-gray flex justify-between items-center\">\n      <div className=\"flex justify-between items-center\">\n        <figure className=\"h-12 w-12 relative\"> \n          <img className=\"object-cover absolute\" src={process.env.PUBLIC_URL+currentTrack.img.src}  alt={`${currentTrack.title}`}/>\n          <figcaption className=\"sr-only\">\n            {`Cover of ${currentTrack.title} by ${currentTrack.artist}`}\n          </figcaption>\n        </figure>\n        <div className=\"pl-5\">\n          <p className=\"text-white font-bold tracking-wide lg:text-lg text-base\">{currentTrack.title}</p>\n          <p className=\"text-white font-light tracking-wide lg:text-sm text-xs mt-1\">{currentTrack.artist}</p>\n        </div>\n      </div>\n      <div className=\"flex justify-between items-center w-38\">\n        <button title=\"previous song\" className=\"cursor-pointer flex justify-center items-center h-10 w-10 rounded-full bg-black\" onClick={()=>prevSong()}>\n          <FastForwardIcon className=\"h-3/5 w-3/5 text-white transform rotate-180\"/> \n        </button>\n        <button title=\"play song\" className=\"cursor-pointer group flex justify-center items-center h-10 w-10 rounded-full bg-black\" onClick={()=>playSong()}>\n          {playing ? \n          <PauseIcon className=\"group-hover:scale-105 transform scale-100 transition duration-150 ease-out h-full w-full text-white\"/>\n          :\n          <PlayIcon className=\"group-hover:scale-105 transform scale-100 transition duration-150 ease-out h-full w-full text-white\"/> \n          }\n          \n        </button>\n        <button title=\"next song\" className=\"cursor-pointer flex justify-center items-center h-10 w-10 rounded-full bg-black\" onClick={()=>nextSong()}>\n          <FastForwardIcon className=\"h-3/5 w-3/5 text-white\"/> \n        </button>\n      </div>\n    </div>\n  ) \n}\n\nexport default Player\n","import FiberCanvas from \"./components/FiberCanvas\"\nimport Player from \"./components/Player\"\nimport AudioContextProvider from \"./contexts/AudioContext\"\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <AudioContextProvider>     \n        <Player/>\n        <FiberCanvas/>\n      </AudioContextProvider>\n    </div> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css'; \nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}