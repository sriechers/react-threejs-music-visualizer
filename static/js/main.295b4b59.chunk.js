(this["webpackJsonpreact-threejs-music-visualizer"]=this["webpackJsonpreact-threejs-music-visualizer"]||[]).push([[0],{19:function(t){t.exports=JSON.parse('[{"title":"Chasing (Demo)","artist":"NF","img":{"src":"https://via.placeholder.com/150"}},{"title":"Tell me about tomorrow","artist":"JXDN","img":{"src":"https://via.placeholder.com/150"}}]')},27:function(t,e,n){},30:function(t,e,n){"use strict";n.r(e);var i=n(0),r=n.n(i),s=n(16),a=n.n(s),o=(n(27),n(1)),c=n(2),l=n(5),f=n(17),v="\n  // Fragement Shader setzt die Farbe f\xfcr jeden Pixel\n\n  varying float vDistort;\n  varying vec2 vUv;\n  varying float vMousePos;\n  uniform float u_time;\n  uniform vec2 u_resolution;\n  uniform vec2 u_mouse;\n  // uniform vec2 u_hover; \n  float PI = 3.14159265359;\n\n  vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n      return a + b * cos(6.28318 * (c * t + d));\n  } \n    \n  float quarticInOut(float t) {\n    return t < 0.5\n      ? +8.0 * pow(t, 4.0)\n      : -8.0 * pow(t - 1.0, 4.0) + 1.0;\n  }\n\n  float map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n  }\n\n  void main()\t{\n    float intensity = 6.0;\n    float distort = vDistort * intensity;\n\n    vec2 position = gl_FragCoord.xy / u_resolution.xy;\n\n    vec3 brightness = vec3(0.7, 0.7, 0.7);\n    vec3 contrast = vec3(0.5);\n    vec3 oscilation = vec3(0.008);\n    vec3 phase = vec3(0.2);\n    float mouse = map(vMousePos * 5.0, -3.0, 1.0, 0.0, 1.0 );\n\n    float randGlow = (sin(2. * PI + u_time / 1.8) + 10.0) * 0.02;\n\n    float glow = quarticInOut(clamp(mouse, 0.1, 0.2) + randGlow);\n\n    vec3 color = cosPalette(distort, brightness, contrast, oscilation, phase) * glow;\n\n    gl_FragColor = vec4(color, 1.0);\n  }\n",m='\n  // Vertex Shader ver\xe4ndert die Position jedes Vertex (die Punkte im Mesh)\n  varying vec2 vUv;\n  varying float vMousePos;\n  varying float vDistort;\n  uniform float u_time;\n  uniform vec2 u_mouse;\n\n  // uniform vec2 u_hover; \n\n  // GLSL textureless classic 3D noise "cnoise",\n  // with an RSL-style periodic variant "pnoise".\n  // Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n  // Version: 2011-10-11\n  //\n  // Many thanks to Ian McEwan of Ashima Arts for the\n  // ideas for permutation and gradient selection.\n  //\n  // Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n  // Distributed under the MIT license. See LICENSE file.\n  // https://github.com/ashima/webgl-noise\n  //\n\n  vec3 mod289(vec3 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 mod289(vec4 x)\n  {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n  }\n\n  vec4 permute(vec4 x)\n  {\n    return mod289(((x*34.0)+1.0)*x);\n  }\n\n  vec4 taylorInvSqrt(vec4 r)\n  {\n    return 1.79284291400159 - 0.85373472095314 * r;\n  }\n\n  vec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  // Classic Perlin noise, periodic variant\n  float pnoise(vec3 P, vec3 rep)\n  {\n    vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n    vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n  }\n\n  mat3 rotation3dY(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat3(\n      c, 0.0, -s,\n      0.0, 1.0, 0.0,\n      s, 0.0, c\n    );\n  }\n\n  vec3 rotateY(vec3 v, float angle) {\n    return rotation3dY(angle) * v;\n  }  \n\n  void main() {\n    vUv = uv;\n\n    float mousePos = 1.0 - ( 2.0 * max(abs(u_mouse.x), abs(u_mouse.y)) );\n    vMousePos = mousePos;\n\n    float scale = clamp(1.0 - abs(abs(u_mouse.x) + abs(u_mouse.y)), 1.0, 1.05);\n\n\n    float speed = 0.01;\n    float mouseMorph = u_mouse.x / 15.;\n\n    float t = u_time * speed;\n    float frequency = 2.9;\n    float amplitude = 2.;\n    float noiseDensity = 7.2;\n    float noiseStrength = 8.;\n    float noiseScale = 1.0;\n    vec3 repetitions = vec3(2.0);\n  \n    float distortion = pnoise((normal * noiseScale + t) * noiseDensity, repetitions) * noiseStrength;\n    vDistort = distortion;\n\n    vec3 pos = position + (normal * distortion);\n    float angle = sin(uv.y * frequency + t) * amplitude;\n    pos = rotateY(pos, angle);    \n\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos * (scale + mousePos * 0.02), 1.);\n  }\n',u=n(20),d=n(18),h=n(12),g=n(21),x=n(22),y={defines:{BAND_MODE:2,CHROMA_SAMPLES:1},uniforms:{tDiffuse:{value:null},baseIor:{value:.075},bandOffset:{value:.003},jitterIntensity:{value:1},jitterOffset:{value:0}},vertexShader:"\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 viewDir;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\tviewDir = normalize( ( modelViewMatrix * vec4( position, 1.0 ) ).xyz );\n\t\t}\n\t",fragmentShader:"\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 viewDir;\n\t\tuniform float baseIor;\n\t\tuniform float bandOffset;\n\t\tuniform float jitterIntensity;\n\t\tuniform float jitterOffset;\n\t\tuniform sampler2D tDiffuse;\n\t\t#include <common>\n\t\tvoid main() {\n\t\t\tvec3 normal = vec3( ( 2.0 * vUv - vec2( 1.0 ) ), 1.0 );\n\t\t\tnormal.z = 1.0;\n\t\t\tnormal = normalize( normal );\n\t\t\tvec3 color;\n\t\t\t// if NO BANDS\n\t\t\t#if BAND_MODE == 0\n\t\t\tvec3 refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor );\n\t\t\tcolor = texture2D( tDiffuse, vUv + refracted.xy ).rgb;\n\t\t\t// if RGB or RYGCBV BANDS\n\t\t\t#else\n\t\t\tfloat index, randValue, offsetValue;\n\t\t\tfloat r, g, b, r_ior, g_ior, b_ior;\n\t\t\tvec3 r_refracted, g_refracted, b_refracted;\n\t\t\tvec4 r_sample, g_sample, b_sample;\n\t\t\t#if BAND_MODE == 2\n\t\t\tfloat y, c, v, y_ior, c_ior, v_ior;\n\t\t\tvec3 y_refracted, c_refracted, v_refracted;\n\t\t\tvec4 y_sample, c_sample, v_sample;\n\t\t\t#endif\n\t\t\tfor ( int i = 0; i < CHROMA_SAMPLES; i ++ ) {\n\t\t\t\tindex = float( i );\n\t\t\t\trandValue = rand( sin( index + 1. ) * gl_FragCoord.xy + vec2( jitterOffset, - jitterOffset ) ) - 0.5;\n\t\t\t\toffsetValue = index / float( CHROMA_SAMPLES ) + randValue * jitterIntensity;\n\t\t\t\t#if BAND_MODE == 1\n\t\t\t\trandValue *= 2.0;\n\t\t\t\t#endif\n\t\t\t\t// Paper describing functions for creating yellow, cyan, and violet bands and reforming\n\t\t\t\t// them into RGB:\n\t\t\t\t// https://web.archive.org/web/20061108181225/http://home.iitk.ac.in/~shankars/reports/dispersionraytrace.pdf\n\t\t\t\tr_ior = 1.0 + bandOffset * ( 0.0 + offsetValue );\n\t\t\t\tg_ior = 1.0 + bandOffset * ( 2.0 + offsetValue );\n\t\t\t\tb_ior = 1.0 + bandOffset * ( 4.0 + offsetValue );\n\t\t\t\tr_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / r_ior );\n\t\t\t\tg_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / g_ior );\n\t\t\t\tb_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / b_ior );\n\t\t\t\tr_sample = texture2D( tDiffuse, vUv + r_refracted.xy );\n\t\t\t\tg_sample = texture2D( tDiffuse, vUv + g_refracted.xy );\n\t\t\t\tb_sample = texture2D( tDiffuse, vUv + b_refracted.xy );\n\t\t\t\t#if BAND_MODE == 2\n\t\t\t\ty_ior = 1.0 + bandOffset * ( 1.0 + offsetValue );\n\t\t\t\tc_ior = 1.0 + bandOffset * ( 3.0 + offsetValue );\n\t\t\t\tv_ior = 1.0 + bandOffset * ( 5.0 + offsetValue );\n\t\t\t\ty_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / y_ior );\n\t\t\t\tc_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / c_ior );\n\t\t\t\tv_refracted = refract( vec3( 0.0, 0.0, - 1.0 ), normal, baseIor / v_ior );\n\t\t\t\ty_sample = texture2D( tDiffuse, vUv + y_refracted.xy );\n\t\t\t\tc_sample = texture2D( tDiffuse, vUv + c_refracted.xy );\n\t\t\t\tv_sample = texture2D( tDiffuse, vUv + v_refracted.xy );\n\t\t\t\tr = r_sample.r / 2.0;\n\t\t\t\ty = ( 2.0 * y_sample.r + 2.0 * y_sample.g - y_sample.b ) / 6.0;\n\t\t\t\tg = g_sample.g / 2.0;\n\t\t\t\tc = ( 2.0 * c_sample.g + 2.0 * c_sample.b - c_sample.r ) / 6.0;\n\t\t\t\tb = b_sample.b / 2.0;\n\t\t\t\tv = ( 2.0 * v_sample.b + 2.0 * v_sample.r - v_sample.g ) / 6.0;\n\t\t\t\tcolor.r += r + ( 2.0 * v + 2.0 * y - c ) / 3.0;\n\t\t\t\tcolor.g += g + ( 2.0 * y + 2.0 * c - v ) / 3.0;\n\t\t\t\tcolor.b += b + ( 2.0 * c + 2.0 * v - y ) / 3.0;\n\t\t\t\t#else\n\t\t\t\tcolor.r += r_sample.r;\n\t\t\t\tcolor.g += g_sample.g;\n\t\t\t\tcolor.b += b_sample.b;\n\t\t\t\t#endif\n\t\t\t}\n\t\t\tcolor /= float( CHROMA_SAMPLES );\n\t\t\t#endif\n\t\t\tgl_FragColor = vec4( color, 1.0 );\n\t\t}\n\t"},p=n(7),b=function(){function t(e){Object(o.a)(this,t),this.time=0,this.container=e.domEl,this.scene=new l.t,this.scene.fog=new l.h(0,.001),this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.mouse=new l.y,this.cameraDistance=600,this.camera=new l.p(70,this.width/this.height,100,2e3),this.camera.position.z=this.cameraDistance,this.camera.fov=2*Math.atan(this.height/2/this.cameraDistance)*(180/Math.PI),this.raycaster=new l.s,this.renderer=new l.B({antialias:!0}),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.container.appendChild(this.renderer.domElement),this.controls=new f.a(this.camera,this.renderer.domElement),this.composerPass(),this.addObjects(),this.resize(),this.render(),this.mouseMovement()}return Object(c.a)(t,[{key:"composerPass",value:function(){this.composer=new u.a(this.renderer),this.composer.setSize(this.width,this.height),this.composer.setPixelRatio(window.devicePixelRatio),this.renderPass=new d.a(this.scene,this.camera),this.composer.addPass(this.renderPass),this.filmPass=new x.a(1,0,0,0),this.composer.addPass(this.filmPass),this.unrealBloomPass=new g.a(this.width/this.height,1,1.5,0),this.composer.addPass(this.unrealBloomPass),this.distortPass=new h.a(y),this.distortPass.material.defines.CHROMA_SAMPLES=2,this.distortPass.material.defines.BAND_MODE=0,this.distortPass.material.needsUpdate=!0,this.composer.addPass(this.distortPass)}},{key:"mouseMovement",value:function(){var t=this;window.addEventListener("mousemove",(function(e){t.mouse.x=e.pageX/t.width*2-1,t.mouse.y=-e.pageY/t.height*2+1,t.uniforms.u_mouse.value=t.mouse}),!1)}},{key:"setupResize",value:function(){window.addEventListener("resize",this.resize.bind(this))}},{key:"resize",value:function(){this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.uniforms.u_resolution.value.x=this.width,this.uniforms.u_resolution.value.y=this.height,this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix()}},{key:"addObjects",value:function(){this.geometry=new l.i(200,100),this.material=new l.n,this.uniforms={u_time:{value:0},u_resolution:{value:new l.y(this.width,this.height)},u_mouse:{value:new l.y(0,0)}},this.material=new l.u({uniforms:this.uniforms,side:l.e,fragmentShader:v,vertexShader:m}),this.mesh=new l.l(this.geometry,this.material),this.scene.add(this.mesh)}},{key:"destroy",value:function(){window.cancelAnimationFrame(this.raf),window.removeEventListener("resize",this.resize)}},{key:"render",value:function(){this.time+=.05,this.mesh.rotation.y=this.time/40,this.mesh.rotation.z=this.time/65,this.material.uniforms.u_time.value=this.time,this.distortPass.material.uniforms.baseIor.value=.9,this.distortPass.material.uniforms.bandOffset.value=.003,this.distortPass.material.uniforms.jitterOffset.value+=.1,this.distortPass.material.uniforms.jitterIntensity.value=.2,this.composer.render(),this.raf=window.requestAnimationFrame(this.render.bind(this))}}]),t}();var _=function(){var t=Object(i.useRef)();return Object(i.useEffect)((function(){var e=new b({domEl:t.current,vertexShader:m,fragmentShader:v});return function(){e.destroy(),e=null}}),[]),Object(p.jsx)("div",{ref:t,className:"webgl-canvas"})},w=n(14);var P=function(t){var e=t.currentTrack;return Object(p.jsxs)("div",{className:"fixed bottom-0 left-0 w-full py-6 px-8 z-50 bg-black text-gray-100 border-t-2 border-dark-gray flex justify-between items-center",children:[Object(p.jsxs)("div",{className:"flex justify-between items-center",children:[Object(p.jsxs)("figure",{className:"h-12 w-12 relative",children:[Object(p.jsx)("img",{className:"h-full w-full object-cover absolute",src:e[0].img.src,alt:"".concat(e[0].title)}),Object(p.jsx)("figcaption",{className:"sr-only",children:"Cover of ".concat(e[0].title," by ").concat(e[0].artist)})]}),Object(p.jsxs)("div",{className:"pl-5",children:[Object(p.jsx)("p",{className:"text-white font-bold tracking-wide text-lg",children:e[0].title}),Object(p.jsx)("p",{className:"text-white tracking-wide text-sm",children:e[0].artist})]})]}),Object(p.jsxs)("div",{className:"flex justify-between items-center w-38",children:[Object(p.jsx)("button",{title:"previous song",className:"cursor-pointer flex justify-center items-center h-10 w-10 rounded-full bg-black",onClick:function(){},children:Object(p.jsx)(w.a,{className:"h-3/5 w-3/5 text-white transform rotate-180"})}),Object(p.jsx)("button",{title:"play song",className:"cursor-pointer group flex justify-center items-center h-10 w-10 rounded-full bg-black",onClick:function(){console.log("play")},children:Object(p.jsx)(w.b,{className:"group-hover:scale-105 transform scale-100 transition duration-150 ease-out h-full w-full text-white"})}),Object(p.jsx)("button",{title:"next song",className:"cursor-pointer flex justify-center items-center h-10 w-10 rounded-full bg-black",onClick:function(){},children:Object(p.jsx)(w.a,{className:"h-3/5 w-3/5 text-white"})})]})]})},z=n(19);var j=function(){return Object(p.jsx)("div",{children:Object(p.jsx)(P,{currentTrack:z})})};var O=function(){return Object(p.jsxs)("div",{className:"App",children:[Object(p.jsx)(j,{}),Object(p.jsx)(_,{})]})};a.a.render(Object(p.jsx)(r.a.StrictMode,{children:Object(p.jsx)(O,{})}),document.getElementById("root"))}},[[30,1,2]]]);
//# sourceMappingURL=main.295b4b59.chunk.js.map